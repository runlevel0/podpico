name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  TAURI_PRIVATE_KEY: "dummy_key_for_ci"
  TAURI_KEY_PASSWORD: ""

jobs:
  # Frontend quality checks
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: TypeScript type checking
        run: npm run type-check
        
      - name: ESLint (zero warnings policy)
        run: npm run lint
        
      - name: Prettier formatting check
        run: npm run format:check
        
      - name: Frontend tests with coverage
        run: npm run test:coverage
        
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: coverage/
          retention-days: 7
          
      - name: Frontend build verification
        run: npm run build

  # Backend quality checks
  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
            
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          
      - name: Rust formatting check
        working-directory: ./src-tauri
        run: cargo fmt --all -- --check
        
      - name: Clippy (zero warnings policy)
        working-directory: ./src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Backend tests
        working-directory: ./src-tauri
        run: cargo test --all
        
      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin
          
      - name: Run backend coverage
        working-directory: ./src-tauri
        run: |
          cargo tarpaulin \
            --out Xml \
            --out Html \
            --output-dir coverage \
            --all-features \
            --workspace \
            --timeout 120 \
            --exclude-files "../target/*" \
            --fail-under 80
            
      - name: Upload backend coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: src-tauri/coverage/
          retention-days: 7
          
      - name: Backend compilation check
        working-directory: ./src-tauri
        run: cargo check --all-targets --all-features

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            xvfb
            
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Install dependencies
        run: npm ci
        
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          
      - name: Build Tauri app
        run: npm run build
        
      - name: Run E2E tests (when implemented)
        run: |
          echo "E2E tests will be run here once implemented"
          # xvfb-run -a npm run test:e2e

  # Documentation verification
  documentation:
    name: Documentation Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Make scripts executable
        run: chmod +x ./scripts/*.sh
        
      - name: Run documentation verification
        run: ./scripts/doc-verify.sh
        continue-on-error: true  # Allow warnings but not failures
        
      - name: Check documentation status
        run: |
          if ./scripts/doc-verify.sh; then
            echo "✅ Documentation verification passed"
          else
            exit_code=$?
            if [ $exit_code -eq 2 ]; then
              echo "⚠️ Documentation has warnings but CI can continue"
            else
              echo "❌ Documentation verification failed"
              exit 1
            fi
          fi

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
          
      - name: Run security audit
        working-directory: ./src-tauri
        run: cargo audit
        continue-on-error: true  # Don't fail the build on advisories

  # Cross-platform build verification
  build-verification:
    name: Build Verification (${{ matrix.platform }})
    needs: [frontend-quality, backend-quality]
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
            
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: Install dependencies
        run: npm ci
        
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          
      - name: Build application
        run: npm run build
        
      - name: Verify Tauri build
        run: npm run tauri build --debug
        continue-on-error: true  # Don't fail on unsigned builds

  # Quality gate summary
  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, integration-tests, documentation, security]
    if: always()
    
    steps:
      - name: Check quality gate status
        run: |
          echo "🎯 Quality Gate Summary"
          echo "====================="
          
          # Check if all required jobs passed
          if [ "${{ needs.frontend-quality.result }}" != "success" ]; then
            echo "❌ Frontend quality checks failed"
            exit 1
          fi
          
          if [ "${{ needs.backend-quality.result }}" != "success" ]; then
            echo "❌ Backend quality checks failed"
            exit 1
          fi
          
          if [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed!"
          echo ""
          echo "📊 Quality Metrics:"
          echo "- Frontend: ESLint ✅, TypeScript ✅, Tests ✅"
          echo "- Backend: Clippy ✅, Tests ✅, Coverage ≥80% ✅"
          echo "- Integration: Build verification ✅"
          echo "- Documentation: Verified ✅"
          echo ""
          echo "🚀 Ready for deployment!"